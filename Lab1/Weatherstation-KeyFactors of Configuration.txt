Based on the threat analysis (see WeatherStationThreatModel-Report-32A2FDC7) this are key factors of configuration:

1. Design for collecting and storing audit data gathered through IoT Hub Operations Monitoring. Enable the following monitoring categories: Device identity operations Device-to-cloud communications Cloud-to-device communications Connections File uploads. Reason: An adversary can deny actions on Cloud Gateway due to lack of auditing.

2. Ensure that the default login credentials of the field gateway are changed during installation. Reason: An adversary may gain access to the field gateway by leveraging default login credentials.

3. nformation and guidance provided at <a href="https://aka.ms/tmt-th165c">https://aka.ms/tmt-th165c</a>. Reason: An adversary may block access to the application or API hosted on Functions through a denial of service attack.

4. When you create a new storage account, you select a deployment model of Classic or Azure Resource Manager. The Classic model of creating resources in Azure only allows all-or-nothing access to the subscription, and in turn, the storage account. With the Azure Resource Manager model, you put the storage account in a resource group and control access to the management plane of that specific storage account using Azure Active Directory. For example, you can give specific users the ability to access the storage account keys, while other users can view information about the storage account, but cannot access the storage account keys. Reason: An adversary may gain unauthorized access to Data Lake Analytics account in a subscription.

5. When you create a new storage account, you select a deployment model of Classic or Azure Resource Manager. The Classic model of creating resources in Azure only allows all-or-nothing access to the subscription, and in turn, the storage account. With the Azure Resource Manager model, you put the storage account in a resource group and control access to the management plane of that specific storage account using Azure Active Directory. For example, you can give specific users the ability to access the storage account keys, while other users can view information about the storage account, but cannot access the storage account keys. Reason: An adversary may gain unauthorized access to Data Lake Store account in a subscription.

6. SaS tokens generated for authenticating to Azure IoT Hub should have a finite expiry period. Keep the SaS token lifetimes to a minimum to limit the amount of time they can be replayed in case the tokens are compromised. Reason: An adversary may replay stolen long-lived SaS tokens of IoT Hub.

7. IoT Hub contains a device Identity Registry and while provisioning a device, automatically generates a random Symmetric key. It is recommended to use this feature of the Azure IoT Hub Identity Registry to generate the key used for authentication. IoT Hub also allows for a key to be specified while creating the device. If a key is generated outside of IoT Hub during device provisioning, it is recommended to create a random symmetric key or at least 256 bits. Reason:  An adversary may auto-generate valid authentication tokens for IoT Hub.

8. Use per device authentication credentials using SaS tokens based on Device key or Client Certificate, instead of IoT Hub-level shared access policies. This prevents the reuse of authentication tokens of one device or field gateway by another. Reason: An adversary may reuse the authentication tokens of IoT Device in another.

9. Generic: Authenticate the device using Transport Layer Security (TLS) or IPSec. Infrastructure should support using pre-shared key (PSK) on those devices that cannot handle full asymmetric cryptography. Leverage Azure AD, Oauth. C#: When creating a DeviceClient instance, by default, the Create method creates a DeviceClient instance that uses the AMQP protocol to communicate with IoT Hub. To use the HTTPS protocol, use the override of the Create method that enables you to specify the protocol. If you use the HTTPS protocol, you should also add the Microsoft.AspNet.WebApi.Client NuGet package to your project to include the System.Net.Http.Formatting namespace. Reason: an adversary may spoof IoT Device with a fake one.

10. Ensure that the default login credentials of the field gateway are changed during installation. Reason:  An adversary may gain access to the field gateway by leveraging default login credentials. 

11. Design for collecting and storing audit data gathered through IoT Hub Operations Monitoring. Enable the following monitoring categories: Device identity operations Device-to-cloud communications Cloud-to-device communications Connections File uploads. Reason: An adversary can deny actions on Cloud Gateway due to lack of auditing.

12. Windows 10 IoT Core implements a lightweight version of bit-locker Device Encryption, which has a strong dependency on the presence of a TPM on the platform, including the necessary preOS protocol in UEFI that conducts the necessary measurements. These preOS measurements ensure that the OS later has a definitive record of how the OS was launched.Encrypt OS partitions using bit-locker and any additional partitions also in case they store any sensitive data. Reason: An adversary may tamper the OS of a device and launch offline attacks.

13. Symmetric or Certificate Private keys securely in a hardware protected storage like TPM or Smart Card chips. Windows 10 IoT Core supports the user of a TPM and there are several compatible TPMs that can be used: https://docs.microsoft.com/windows/iot-core/secure-your-device/tpm#discrete-tpm-dtpm. It is recommended to use a Firmware or Discrete TPM. A Software TPM should only be used for development and testing purposes. Once a TPM is available and the keys are provisioned in it, the code that generates the token should be written without hard coding any sensitive information in it. Reason: An adversary may tamper IoT Device and extract cryptographic key material from it.

14. LWM2M is a protocol from the Open Mobile Alliance for IoT Device Management. Azure IoT device management allows to interact with physical devices using device jobs. Ensure that the Cloud Gateway implements a process to routinely keep the device and other configuration data up to date using Azure IoT Hub Device Management. Reason: An adversary may exploit known vulnerabilities in unpatched devices.

15. Secure HTTP/AMQP or MQTT protocols using SSL/TLS. Reason: An adversary may eavesdrop the traffic to cloud gateway.

16. Azure Role-Based Access Control (RBAC) enables fine-grained access management for Azure. Using RBAC, you can grant only the amount of access that users need to perform their jobs. Reason: An adversary can can gain unauthorized access to resources in an Azure subscription.

17. Provide least privilege permissions to various components that connect to Cloud Gateway (IoT Hub). Typical example is â€“ Device management/provisioning component uses registryread/write, Event Processor (ASA) uses Service Connect. Individual devices connect using Device credentials. Reason: An adversary may gain elevated privileges on IoT Cloud Gateway. Reason: An adversary may gain elevated privileges on IoT Cloud Gateway.

18. Any administrative interfaces that the device or field gateway exposes should be secured using strong credentials. Also, any other exposed interfaces like WiFi, SSH, File shares, FTP should be secured with strong credentials. Default weak passwords should not be used. Reason: An adversary may gain unauthorized access to privileged features on IoT Device.

19. Do not enable or turn off any features or services in the OS that is not required for the functioning of the solution. For e.g. if the device does not require a UI to be deployed, install Windows IoT Core in headless mode. Reason: An adversary may exploit unused services or features in IoT Cloud Gateway.

20. The Device should authorize the caller to check if the caller has the required permissions to perform the action requested. For e.g. Lets say the device is a Smart Door Lock that can be monitored from the cloud, plus it provides functionalities like Remotely locking the door. The Smart Door Lock provides unlocking functionality only when someone physically comes near the door with a Card. In this case, the implementation of the remote command and control should be done in such a way that it does not provide any functionality to unlock the door as the cloud gateway is not authorized to send a command to unlock the door. Reason: An adversary may trigger unauthorized commands on the IoT Device Device

21. UEFI Secure Boot restricts the system to only allow execution of binaries signed by a specified authority. This feature prevents unknown code from being executed on the platform and potentially weakening the security posture of it. Enable UEFI Secure Boot and restrict the list of certificate authorities that are trusted for signing code. Sign all code that is deployed on the device using one of the trusted authorities. Reason: an adversary may execute unknown code on IoT Device.

22. 	Applications that use SSL, TLS, or DTLS must fully verify the X.509 certificates of the entities they connect to. This includes verification of the certificates for: Domain name Validity dates (both beginning and expiration dates) Revocation status Usage (for example, Server Authentication for servers, Client Authentication for clients) Trust chain. Certificates must chain to a root certification authority (CA) that is trusted by the platform or explicitly configured by the administrator Key length of certificate's public key must be &gt;2048 bits Hashing algorithm must be SHA256 and above. Reason: An adversary may attempt to intercept encrypted traffic sent to IoT Device